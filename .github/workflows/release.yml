name: Release

on: [push]

jobs:
  build-release:
    name: build-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-cross: false
          - build: x86_64-pc-windows-gnu
            os: windows-latest
            target: x86_64-pc-windows-gnu
            use-cross: false
          - build: macos-x86_64
            os: macos-latest
            target: x86_64-apple-darwin
            use-cross: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set the version
      id: version
      run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        target: ${{ matrix.target }}
    
    - name: Add mingw64 to path for x86_64-gnu
      run: echo "C:\msys64\mingw64\bin" >> $GITHUB_PATH
      if: matrix.os == 'windows-latest'
      shell: bash

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        use-cross: ${{ matrix.use-cross }}
        command: build
        args: --release --locked

    - name: Strip binary
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: strip target/release/fs

    - name: Build archive
      shell: bash
      run: |
        staging="fs_${{ matrix.build }}_${{ github.event.release.tag_name }}"
        mkdir -p "$staging"

        cp {README.md,LICENSE} "$staging/"

        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp target/release/fs.exe "$staging/"
          7z a "$staging.zip" "$staging"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        else
          cp target/release/fs "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream